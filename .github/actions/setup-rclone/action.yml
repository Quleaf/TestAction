name: 'Setup Rclone'
description: 'Installs and configures rclone for S3 uploads/downloads without sudo, using $HOME/.cache/rclone for caching.'
inputs:
  access_key_id:
    description: 'Access Key ID for S3'
    required: true
  secret_access_key:
    description: 'Secret Access Key for S3'
    required: true
  endpoint:
    description: 'S3 Endpoint URL'
    required: true
  bucket:
    description: 'S3 Bucket Name'
    required: true
  destination_path:
    description: 'Destination path in the S3 bucket'
    required: true
outputs:
  rclone_installed:
    description: 'Indicates if rclone was installed in this run'
    value: ${{ steps.check_rclone.outputs.installed }}
runs:
  using: 'composite'
  steps:
    - name: Prepare cache path env
      id: envprep
      shell: bash
      run: |
        set -euo pipefail
        # Define cache directory under $HOME/.cache/rclone
        echo "RCLONE_CACHE_DIR=$HOME/.cache/rclone" >> $GITHUB_ENV
        echo "RCLONE_CACHE_BIN=$HOME/.cache/rclone/rclone" >> $GITHUB_ENV

    - name: Check if rclone is available locally or in cache
      id: check_rclone
      shell: bash
      run: |
        set -euo pipefail
        if [ -x "./rclone" ]; then
          # rclone binary already present in the current directory
          echo "Found local ./rclone"
          echo "installed=true" >> $GITHUB_OUTPUT
        elif [ -x "${RCLONE_CACHE_BIN}" ]; then
          # Found cached binary, copy it to current directory
          echo "Found cached rclone at ${RCLONE_CACHE_BIN}; copying to ./rclone"
          cp "${RCLONE_CACHE_BIN}" ./rclone
          chmod +x ./rclone
          echo "installed=true" >> $GITHUB_OUTPUT
        else
          # rclone not installed locally or in cache
          echo "rclone not found locally or in cache"
          echo "installed=false" >> $GITHUB_OUTPUT
        fi

    - name: Download rclone and populate cache (no sudo)
      if: steps.check_rclone.outputs.installed != 'true'
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p "${RCLONE_CACHE_DIR}"
        echo "Downloading rclone..."
        curl -sSL https://downloads.rclone.org/rclone-current-linux-amd64.zip -o rclone.zip
        unzip -q rclone.zip
        # Extracted directory has a dynamic name like rclone-*-linux-amd64
        SRC_DIR="$(echo rclone-*-linux-amd64)"
        mv "${SRC_DIR}/rclone" ./rclone
        chmod +x ./rclone
        # Save to cache for reuse in future runs
        cp ./rclone "${RCLONE_CACHE_BIN}"
        echo "rclone downloaded and cached at ${RCLONE_CACHE_BIN}"

    - name: Configure rclone (local config)
      shell: bash
      run: |
        set -euo pipefail
        # Store configuration in project-local directory
        mkdir -p ./.rclone_config
        tee ./.rclone_config/rclone.conf > /dev/null <<EOF
        [pawsey0001]
        type = s3
        provider = Ceph
        endpoint = ${{ inputs.endpoint }}
        access_key_id = ${{ inputs.access_key_id }}
        secret_access_key = ${{ inputs.secret_access_key }}
        EOF
        # Export environment variable so ./rclone automatically picks up this config
        echo "RCLONE_CONFIG=$(pwd)/.rclone_config/rclone.conf" >> $GITHUB_ENV

    - name: Verify rclone Configuration
      shell: bash
      run: |
        set -euo pipefail
        echo "Verifying rclone configuration..."
        ./rclone config show
