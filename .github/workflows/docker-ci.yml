name: ci

on:
  push:

jobs:
  build-and-scan:
    runs-on: work
    outputs:
      dockerfile_name: ${{ steps.parse_path.outputs.dockerfile_name }}
      platform_tag: ${{ steps.parse_path.outputs.platform_tag }}
      date: ${{ steps.date.outputs.date }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Ensure enough history is available

      - name: Get changed files
        id: changed_files
        run: |
          files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} '*.dockerfile')
          if [ -z "$files" ]; then
            echo "No dockerfile has been modified"
          else
            echo "Files changed: $files"
            echo "files=$files" >> $GITHUB_OUTPUT
          fi

      - name: Debug output
        run: |
          echo "Files from output: ${{ steps.changed_files.outputs.files }}"

      - name: Check single dockerfile modification
        if: contains(steps.changed_files.outputs.files, '\n')
        run: ï½œ
          echo "We skipped compilation since multiple Dockerfiles have been modified"
          exit 0

      - name: Set up QEMU
        if: "!contains(steps.changed_files.outputs.files, '\n') && steps.changed_files.outputs.files != ''"
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: "!contains(steps.changed_files.outputs.files, '\n') && steps.changed_files.outputs.files != ''"
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: "!contains(steps.changed_files.outputs.files, '\n') && steps.changed_files.outputs.files != ''"
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Parse file path
        if: "!contains(steps.changed_files.outputs.files, '\n') && steps.changed_files.outputs.files != ''"
        id: parse_path
        run: |
          file="${{ steps.changed_files.outputs.files }}"
          echo "File: $file"
          dir=$(dirname "$file")
          echo "Directory: $dir"
          base=$(basename "$file")
          echo "Base: $base"
          dockerfile_name="${base%.*}"
          echo "Dockerfile name: $dockerfile_name"
          # Determine platform
          if [[ "$dir" == *"x86"* ]]; then
            platform="linux/amd64"
            platform_tag="x86"
          elif [[ "$dir" == *"arm"* ]]; then
            platform="linux/arm64"
            platform_tag="arm"
          else
            echo "Unknown directory for $file. Exiting."
            exit 1
          fi
          echo "Platform: $platform"
          echo "Platform tag: $platform_tag"
          echo "dockerfile_name=$dockerfile_name" >> $GITHUB_OUTPUT
          echo "platform=$platform" >> $GITHUB_OUTPUT
          echo "platform_tag=$platform_tag" >> $GITHUB_OUTPUT
          echo "directory=$dir" >> $GITHUB_OUTPUT

      - name: Set current date
        if: "!contains(steps.changed_files.outputs.files, '\n') && steps.changed_files.outputs.files != ''"
        id: date
        run: |
          date_tag=$(date +'%m-%d')
          echo "Date tag: $date_tag"
          echo "date=$date_tag" >> $GITHUB_OUTPUT

      - name: Debug variables before build
        if: "!contains(steps.changed_files.outputs.files, '\n') && steps.changed_files.outputs.files != ''"
        run: |
          echo "Context: ${{ github.workspace }}/${{ steps.parse_path.outputs.directory }}"
          echo "File: ${{ github.workspace }}/${{ steps.changed_files.outputs.files }}"
          echo "Tag: klinus/${{ steps.parse_path.outputs.dockerfile_name }}-${{ steps.parse_path.outputs.platform_tag }}:${{ steps.date.outputs.date }}"
          echo "Platforms: ${{ steps.parse_path.outputs.platform }}"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}  

      - name: Build Docker image locally and push to private Dockerhub
        if: "!contains(steps.changed_files.outputs.files, '\n') && steps.changed_files.outputs.files != ''"
        uses: docker/build-push-action@v6
        with:
          context: ${{ github.workspace }}/${{ steps.parse_path.outputs.directory }}
          file: ${{ github.workspace }}/${{ steps.changed_files.outputs.files }}
          tags: | 
            klinus/${{ steps.parse_path.outputs.dockerfile_name }}-${{ steps.parse_path.outputs.platform_tag }}:${{ steps.date.outputs.date }}
          platforms: ${{ steps.parse_path.outputs.platform }}
          push: true
          provenance: false


      - name: Create Trivy report directory
        if: "!contains(steps.changed_files.outputs.files, '\n') && steps.changed_files.outputs.files != ''"
        run: mkdir -p ./trivy-reports
  
      - name: Scan the Docker image with Trivy
        if: "!contains(steps.changed_files.outputs.files, '\n') && steps.changed_files.outputs.files != ''"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'klinus/${{ steps.parse_path.outputs.dockerfile_name }}-${{ steps.parse_path.outputs.platform_tag }}:${{ steps.date.outputs.date }}'
          format: 'table'
          output: './trivy-reports/trivy-report-${{ steps.parse_path.outputs.dockerfile_name }}.txt'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'


      - name: Upload Trivy scan report
        uses: actions/upload-artifact@v3
        if: "!contains(steps.changed_files.outputs.files, '\n') && steps.changed_files.outputs.files != ''"
        with:
            name: trivy-report-${{ steps.parse_path.outputs.dockerfile_name }}
            path: ${{ github.workspace }}/trivy-reports/trivy-report-${{ steps.parse_path.outputs.dockerfile_name }}.txt

  approve-and-deploy:
    needs: build-and-scan
    runs-on: work
    steps:
      - name: Wait for manual approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: Quleaf
          minimum-approvals: 1
          issue-title: "Approval for deployment"
          issue-body: "Please approve or deny the deployment of the Docker image."
          exclude-workflow-initiator-as-approver: false

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Login to quay Container Registry
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ vars.QUAYIO_USERNAME }}
          password: ${{ secrets.QUAYIO_TOKEN }}
      

      - name: Pull Docker image from Docker Hub
        run: |
          docker pull klinus/${{ needs.build-and-scan.outputs.dockerfile_name }}-${{ needs.build-and-scan.outputs.platform_tag }}:${{ needs.build-and-scan.outputs.date }}

      - name: Tag Docker image for Quay.IO
        run: |
          docker tag klinus/${{ needs.build-and-scan.outputs.dockerfile_name }}-${{ needs.build-and-scan.outputs.platform_tag }}:${{ needs.build-and-scan.outputs.date }} quay.io/klinus/${{ needs.build-and-scan.outputs.dockerfile_name }}-${{ needs.build-and-scan.outputs.platform_tag }}:${{ needs.build-and-scan.outputs.date }}

      - name: Push Docker image to Quay.IO after approval
        run: |
          docker push quay.io/klinus/${{ needs.build-and-scan.outputs.dockerfile_name }}-${{ needs.build-and-scan.outputs.platform_tag }}:${{ needs.build-and-scan.outputs.date }}